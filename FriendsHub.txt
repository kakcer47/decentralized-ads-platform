–û–ø–∏—Å–∞–Ω–∏–µ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç. –ñ–∏–¥–∫–∞—è —Å–∏—Å—Ç–µ–º–∞, –∫–∞ –ª—É–∂–∞, –∞ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–∞–ø–ª–∏ - –æ–±—å—è–¥–∏–Ω—è—Ç—å—Å—è –≤ –µ–¥–∏–Ω—ã–π —Ñ—Ä–∞–∫—Ç–∞–ª, –Ω–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ —Å–∏—Å—Ç–µ–º—É, –æ–Ω–∞ –¥–µ—Ä–∂–µ—Ç—å—Å—è –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –±–µ–∑ —Å–µ—Ä–≤–µ—Ä–∞.
–¢–≤–æ–π FriendsHub —É–∂–µ –∏–º–µ–µ—Ç —Ö–æ—Ä–æ—à—É—é –æ—Å–Ω–æ–≤—É, –Ω–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –µ–≥–æ –Ω–∞–º–Ω–æ–≥–æ –∫—Ä—É—á–µ –∏ –ø—Ä–æ—â–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ. –í–æ—Ç —á—Ç–æ —è –≤–∏–∂—É:

### üí° –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –∏ —É–ª—É—á—à–µ–Ω–∏—è:

**1. WebAssembly (WASM) + Rust –¥–ª—è —è–¥—Ä–∞**
- –ë—ã—Å—Ç—Ä–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø—Ä—è–º–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
- –ï–¥–∏–Ω—ã–π –∫–æ–¥ –¥–ª—è –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
- –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –º–µ–Ω—å—à–µ –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞

**2. WebRTC DataChannels + –Ω–æ–≤—ã–π WebCodecs API**
- –ü—Ä—è–º–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ —Å–µ—Ä–≤–µ—Ä–∞
- –°–∂–∞—Ç–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –ª–µ—Ç—É
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞

**3. IndexedDB + –Ω–æ–≤—ã–π Origin Private File System API**
- –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
- –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤ —Ñ–æ–Ω–µ
- –†–∞–±–æ—Ç–∞ –¥–∞–∂–µ –±–µ–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞

**4. Service Workers + Background Sync**
- –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –Ω–∞—Ç–∏–≤–Ω–æ–µ
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ —Å–µ—Ç–∏
- Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

### üî• –†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ "Fractal Mesh Network":

```typescript
// –ö–æ–Ω—Ü–µ–ø—Ü–∏—è —Å–∞–º–æ–æ—Ä–≥–∞–Ω–∏–∑—É—é—â–µ–π—Å—è —Å–µ—Ç–∏
interface FractalNode {
  id: string;
  level: number; // 0-–≥–ª–æ–±–∞–ª—å–Ω—ã–π, 1-—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π, 2-–ª–æ–∫–∞–ª—å–Ω—ã–π
  capacity: number; // –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å
  trust: number; // —Ä–µ–ø—É—Ç–∞—Ü–∏—è —É–∑–ª–∞
  connections: Set<string>;
  data_cache: Map<string, any>;
}
```

**–ü—Ä–∏–Ω—Ü–∏–ø—ã:**
1. **–ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Ç–æ–ø–æ–ª–æ–≥–∏—è** - —Å–µ—Ç—å —Å–∞–º–∞ –ø–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫—É
2. **–§—Ä–∞–∫—Ç–∞–ª—å–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ** - –∫–∞–∂–¥—ã–π —É–∑–µ–ª –º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å —Ü–µ–Ω—Ç—Ä–æ–º –ø–æ–¥—Å–µ—Ç–∏
3. **–£–º–Ω–æ–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ** - –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Ä–µ–ø–ª–∏—Ü–∏—Ä—É—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
4. **–≠–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å** - —É–∑–ª—ã —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ

### üõ†Ô∏è –ù–æ–≤—ã–π —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Å—Ç–µ–∫:

**–ö–ª–∏–µ–Ω—Ç:**
```javascript
// React 18 + Concurrent Features
// Vite 5 + SWC (–±—ã—Å—Ç—Ä–µ–µ Babel –≤ 20 —Ä–∞–∑)
// Zustand + Immer (–º—É—Ç–∞—Ü–∏–∏ –±–µ–∑ –±–æ–ª–∏)
// TanStack Query (–∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è)
// Tauri (–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ Rust)
```

**P2P –Ø–¥—Ä–æ:**
```rust
// libp2p-rs (Rust –≤–µ—Ä—Å–∏—è)
// quinn (QUIC –ø—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏)
// tokio (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å)
// serde (—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è)
// blake3 (–±—ã—Å—Ç—Ä—ã–π —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ)
```

**–ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—è:**
```javascript
// Web Crypto API (–Ω–∞—Ç–∏–≤–Ω—ã–π –≤ –±—Ä–∞—É–∑–µ—Ä–µ)
// ed25519-dalek —á–µ—Ä–µ–∑ WASM
// post-quantum crypto (–≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –±—É–¥—É—â–µ–º—É)
```

### üåü –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ñ–∏—à–∫–∏:

**1. "Smart Ads" —Å –ò–ò**
- –õ–æ–∫–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ WebAssembly
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è
- –£–º–Ω—ã–π –ø–æ–∏—Å–∫ –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö

**2. "Trust Web" –≤–º–µ—Å—Ç–æ –±–ª–æ–∫—á–µ–π–Ω–∞**
- –†–µ–ø—É—Ç–∞—Ü–∏—è –æ—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ –ø–æ–≤–µ–¥–µ–Ω–∏–∏
- –ù–µ—Ç –º–∞–π–Ω–∏–Ω–≥–∞, –Ω–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤
- –°–∞–º–æ–æ—á–∏—â–∞—é—â–∞—è—Å—è —Å–∏—Å—Ç–µ–º–∞

**3. "Adaptive Bandwidth"**
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
- –ö–∞—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–¥–∞—á–∏ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –ø–æ–¥ —Å–µ—Ç—å
- –ú–æ–±–∏–ª—å–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—é—Ç—Å—è

**4. "Zero-Config Setup"**
- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤ –æ–¥–∏–Ω –∫–ª–∏–∫
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Å–æ—Å–µ–¥–µ–π
- –ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫, –≤—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–∑ –∫–æ—Ä–æ–±–∫–∏

### üì± –ö—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ—Å—Ç—å:

```yaml
–í–µ–±: PWA + Service Workers
–ú–æ–±–∞–π–ª: Capacitor + –Ω–∞—Ç–∏–≤–Ω—ã–µ –ø–ª–∞–≥–∏–Ω—ã
–î–µ—Å–∫—Ç–æ–ø: Tauri (Rust + Web)
IoT: WebAssembly –Ω–∞ –º–∏–∫—Ä–æ–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞—Ö
```

–ò–¥–µ–∞–ª = (–ü—Ä–æ—Å—Ç–æ—Ç–∞ √ó –ú–æ—â–Ω–æ—Å—Ç—å) + (–ö—Ä–∞—Å–æ—Ç–∞ √ó –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å) 
       + (–°–∫–æ—Ä–æ—Å—Ç—å √ó –ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å) + (–ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å √ó –°–æ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å)
       + (–ò–Ω–Ω–æ–≤–∞—Ü–∏–∏ √ó –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å) + –ß–µ–ª–æ–≤–µ—á–Ω–æ—Å—Ç—å¬≤


–Ω–∞—á–∞–ª–æ -->

package.json
{
  "name": "friendshub0",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "preview": "vite preview",
    "lint": "eslint . --ext ts,tsx --report-unused-disable-directives --max-warnings 0"
  },
  "dependencies": {
    "@chainsafe/libp2p-gossipsub": "^14.1.1",
    "@chainsafe/libp2p-yamux": "^7.0.1",
    "@libp2p/bootstrap": "^11.0.38",
    "@libp2p/identify": "^3.0.32",
    "@libp2p/noise": "^12.0.1",
    "@libp2p/ping": "^2.0.32",
    "@libp2p/webrtc": "^5.2.15",
    "@libp2p/websockets": "^9.2.13",
    "@noble/ed25519": "^2.2.3",
    "@tanstack/react-query": "^5.79.0",
    "autoprefixer": "^10.4.21",
    "clsx": "^2.1.1",
    "i18next": "^25.2.1",
    "immer": "^10.1.1",
    "libp2p": "^2.8.8",
    "lucide-react": "^0.511.0",
    "react": "^19.1.0",
    "react-dom": "^19.1.0",
    "react-i18next": "^15.5.2",
    "tailwind-merge": "^3.3.0",
    "tailwindcss": "^3.4.17",
    "zustand": "^5.0.5"
  },
  "devDependencies": {
    "@eslint/js": "^9.27.0",
    "@swc/cli": "^0.7.7",
    "@swc/core": "^1.11.29",
    "@types/react": "^19.1.6",
    "@types/react-dom": "^19.1.5",
    "@typescript-eslint/eslint-plugin": "^8.33.0",
    "@typescript-eslint/parser": "^8.33.0",
    "@vitejs/plugin-react": "^4.5.0",
    "@vitejs/plugin-react-swc": "^3.10.0",
    "eslint": "^9.27.0",
    "eslint-plugin-prettier": "^5.4.0",
    "eslint-plugin-react": "^7.37.5",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.20",
    "globals": "^16.2.0",
    "postcss": "^8.5.4",
    "prettier": "^3.5.3",
    "typescript": "^5.8.3",
    "typescript-eslint": "^8.33.0",
    "vite": "^6.3.5",
    "vite-plugin-pwa": "^1.0.0",
    "workbox-window": "^7.3.0"
  }
}

vite.config.ts
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import { VitePWA } from 'vite-plugin-pwa'
import swc from 'vite-plugin-swc';

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [
    react(),
    VitePWA({
      registerType: 'autoUpdate',
      workbox: {
        globPatterns: ['**/*.{js,css,html,ico,png,svg}']
      },
      manifest: {
        name: 'Fractal Ads Platform',
        short_name: 'FractalAds',
        description: '–î–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π',
        theme_color: '#6366f1',
        background_color: '#ffffff',
        display: 'standalone',
        icons: [
          {
            src: '/icon-192x192.png',
            sizes: '192x192',
            type: 'image/png',
            purpose: 'any maskable'
          },
          {
            src: '/icon-512x512.png',
            sizes: '512x512',
            type: 'image/png',
            purpose: 'any maskable'
          }
        ]
      }
    })
  ],
  define: {
    global: 'globalThis',
  },
  server: {
    port: 3000,
    host: true
  },
  build: {
    target: 'esnext',
    rollupOptions: {
      output: {
        manualChunks: {
          'libp2p': ['libp2p'],
          'react-vendor': ['react', 'react-dom'],
          'crypto': ['@noble/ed25519']
        }
      }
    }
  },
  optimizeDeps: {
    include: ['libp2p', '@libp2p/webrtc', '@libp2p/websockets']
  }
})

tailwind.config.js
/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {
      colors: {
        primary: {
          50: '#f0f9ff',
          100: '#e0f2fe',
          200: '#bae6fd',
          300: '#7dd3fc',
          400: '#38bdf8',
          500: '#0ea5e9',
          600: '#0284c7',
          700: '#0369a1',
          800: '#075985',
          900: '#0c4a6e',
        },
        fractal: {
          100: '#f3f4f6',
          200: '#e5e7eb',
          300: '#d1d5db',
          400: '#9ca3af',
          500: '#6b7280',
          600: '#4b5563',
          700: '#374151',
          800: '#1f2937',
          900: '#111827',
        }
      },
      animation: {
        'pulse-slow': 'pulse 3s cubic-bezier(0.4, 0, 0.6, 1) infinite',
        'bounce-slow': 'bounce 2s infinite',
        'gradient': 'gradient 8s ease infinite',
      },
      keyframes: {
        gradient: {
          '0%, 100%': {
            'background-size': '200% 200%',
            'background-position': 'left center'
          },
          '50%': {
            'background-size': '200% 200%',
            'background-position': 'right center'
          }
        }
      }
    },
  },
  plugins: [],
}

postcss.config.js
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

tsconfig.json
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "noFallthroughCasesInSwitch": true,

    /* Path mapping */
    "baseUrl": ".",
    "paths": {
      "@/*": ["src/*"],
      "@/components/*": ["src/components/*"],
      "@/stores/*": ["src/stores/*"],
      "@/utils/*": ["src/utils/*"],
      "@/types/*": ["src/types/*"]
    }
  },
  "include": ["src"],
  "references": [{ "path": "./tsconfig.node.json" }]
}

tsconfig.node.json
{
  "compilerOptions": {
    "composite": true,
    "skipLibCheck": true,
    "module": "ESNext",
    "moduleResolution": "bundler",
    "allowSyntheticDefaultImports": true,
    "strict": true
  },
  "include": ["vite.config.ts"]
}

mkdir src
mkdir src/components
mkdir src/stores
mkdir src/utils
mkdir src/types
mkdir src/i18n
mkdir public

index.html
<!doctype html>
<html lang="ru">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Fractal Ads Platform</title>
    <meta name="description" content="–î–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å —Ñ—Ä–∞–∫—Ç–∞–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π" />
    <meta name="theme-color" content="#6366f1" />
    <link rel="manifest" href="/manifest.json" />
  </head>
  <body class="bg-gray-50 text-gray-900">
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>

src/index.css
@tailwind base;
@tailwind components;
@tailwind utilities;

/* –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è —Ñ—Ä–∞–∫—Ç–∞–ª—å–Ω–æ–π —Ç–µ–º—ã */
@layer base {
  * {
    @apply border-border;
  }
  
  body {
    @apply bg-background text-foreground;
    font-feature-settings: "rlig" 1, "calt" 1;
  }
}

@layer components {
  .fractal-gradient {
    @apply bg-gradient-to-br from-primary-400 via-primary-500 to-primary-600;
  }
  
  .fractal-card {
    @apply bg-white/80 backdrop-blur-sm border border-gray-200/50 rounded-xl shadow-lg;
  }
  
  .fractal-button {
    @apply px-4 py-2 rounded-lg font-medium transition-all duration-200 transform hover:scale-105 active:scale-95;
  }
  
  .fractal-button-primary {
    @apply fractal-button bg-primary-500 text-white hover:bg-primary-600 shadow-lg shadow-primary-500/25;
  }
  
  .fractal-button-secondary {
    @apply fractal-button bg-gray-100 text-gray-700 hover:bg-gray-200 border border-gray-300;
  }
  
  .fractal-input {
    @apply w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent transition-all duration-200;
  }
  
  .node-pulse {
    animation: node-pulse 2s ease-in-out infinite alternate;
  }
  
  @keyframes node-pulse {
    0% {
      opacity: 0.6;
      transform: scale(1);
    }
    100% {
      opacity: 1;
      transform: scale(1.05);
    }
  }
  
  .network-line {
    stroke-dasharray: 5,5;
    animation: network-flow 2s linear infinite;
  }
  
  @keyframes network-flow {
    to {
      stroke-dashoffset: -10;
    }
  }
}

src/main.tsx
import React from 'react'
import ReactDOM from 'react-dom/client'
import { QueryClient, QueryClientProvider } from '@tanstack/react-query'
import App from './App.tsx'
import './index.css'
import './i18n/index.ts'

// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      staleTime: 1000 * 60 * 5, // 5 –º–∏–Ω—É—Ç
      gcTime: 1000 * 60 * 30, // 30 –º–∏–Ω—É—Ç
    },
  },
})

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <QueryClientProvider client={queryClient}>
      <App />
    </QueryClientProvider>
  </React.StrictMode>,
)

src/types/index.ts
// –¢–∏–ø—ã –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π
export interface Ad {
  id: string
  title: string
  description: string
  price?: number
  currency: string
  category: string
  location: string
  authorId: string
  authorName: string
  createdAt: Date
  updatedAt: Date
  images?: string[]
  tags: string[]
  status: 'active' | 'paused' | 'sold' | 'expired'
  views: number
  favorites: number
}

// –¢–∏–ø—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export interface User {
  id: string
  name: string
  emoji: string
  publicKey: string
  privateKey: string
  createdAt: Date
  reputation: number
  adsCount: number
}

// –¢–∏–ø—ã –¥–ª—è P2P —Å–µ—Ç–∏
export interface NetworkNode {
  id: string
  name: string
  isOnline: boolean
  lastSeen: Date
  location?: string
  connections: number
  trust: number
  capabilities: NodeCapabilities
}

export interface NodeCapabilities {
  canStore: boolean
  canRelay: boolean
  bandwidth: 'low' | 'medium' | 'high'
  storage: number // –≤ MB
}

// –¢–∏–ø—ã –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ—Ç–∏
export interface NetworkMessage {
  id: string
  type: 'ad' | 'user' | 'heartbeat' | 'request'
  payload: any
  authorId: string
  timestamp: Date
  signature: string
  hop: number
}

// –¢–∏–ø—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
export interface AdFilter {
  category?: string
  location?: string
  priceMin?: number
  priceMax?: number
  searchQuery?: string
  tags?: string[]
  sortBy: 'date' | 'price' | 'views' | 'relevance'
  sortOrder: 'asc' | 'desc'
}

// –¢–∏–ø—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
export interface Notification {
  id: string
  type: 'info' | 'success' | 'warning' | 'error'
  title: string
  message: string
  timestamp: Date
  read: boolean
  actionUrl?: string
}

// –¢–∏–ø—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
export interface NetworkStats {
  totalNodes: number
  onlineNodes: number
  totalAds: number
  activeAds: number
  messagesPerSecond: number
  networkHealth: number // 0-100%
}

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
export const CATEGORIES = [
  'electronics',
  'vehicles', 
  'property',
  'jobs',
  'services',
  'fashion',
  'home',
  'sports',
  'books',
  'other'
] as const

export const CURRENCIES = [
  'RUB', 'USD', 'EUR', 'BTC', 'ETH'
] as const

export type Category = typeof CATEGORIES[number]
export type Currency = typeof CURRENCIES[number]

src/i18n/index.ts
import i18n from 'i18next'
import { initReactI18next } from 'react-i18next'

// –ü–µ—Ä–µ–≤–æ–¥—ã –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
const ruTranslations = {
  common: {
    loading: '–ó–∞–≥—Ä—É–∑–∫–∞...',
    error: '–û—à–∏–±–∫–∞',
    success: '–£—Å–ø–µ—à–Ω–æ',
    save: '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å',
    cancel: '–û—Ç–º–µ–Ω–∞',
    delete: '–£–¥–∞–ª–∏—Ç—å',
    edit: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å',
    search: '–ü–æ–∏—Å–∫',
    filter: '–§–∏–ª—å—Ç—Ä',
    clear: '–û—á–∏—Å—Ç–∏—Ç—å',
    back: '–ù–∞–∑–∞–¥',
    next: '–î–∞–ª–µ–µ',
    publish: '–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å',
    draft: '–ß–µ—Ä–Ω–æ–≤–∏–∫'
  },
  app: {
    title: 'Fractal Ads',
    subtitle: '–î–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π',
    welcome: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!',
    getStarted: '–ù–∞—á–∞—Ç—å'
  },
  auth: {
    createAccount: '–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç',
    accountName: '–ò–º—è –∞–∫–∫–∞—É–Ω—Ç–∞',
    selectEmoji: '–í—ã–±–µ—Ä–∏—Ç–µ —ç–º–æ–¥–∑–∏',
    accounts: '–ê–∫–∫–∞—É–Ω—Ç—ã',
    switchAccount: '–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç',
    deleteAccount: '–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç'
  },
  ads: {
    title: '–û–±—ä—è–≤–ª–µ–Ω–∏—è',
    myAds: '–ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è',
    createAd: '–°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ',
    adTitle: '–ù–∞–∑–≤–∞–Ω–∏–µ',
    description: '–û–ø–∏—Å–∞–Ω–∏–µ',
    price: '–¶–µ–Ω–∞',
    category: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
    location: '–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ',
    tags: '–¢–µ–≥–∏',
    noAds: '–ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π',
    views: '–ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤',
    published: '–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ'
  },
  categories: {
    electronics: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞',
    vehicles: '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç',
    property: '–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å',
    jobs: '–†–∞–±–æ—Ç–∞',
    services: '–£—Å–ª—É–≥–∏',
    fashion: '–ú–æ–¥–∞',
    home: '–î–æ–º –∏ —Å–∞–¥',
    sports: '–°–ø–æ—Ä—Ç',
    books: '–ö–Ω–∏–≥–∏',
    other: '–î—Ä—É–≥–æ–µ'
  },
  network: {
    title: '–°–µ—Ç—å',
    status: '–°—Ç–∞—Ç—É—Å —Å–µ—Ç–∏',
    nodes: '–£–∑–ª—ã',
    online: '–û–Ω–ª–∞–π–Ω',
    offline: '–û—Ñ—Ñ–ª–∞–π–Ω',
    connecting: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...',
    connected: '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ',
    peers: '–ü–∏—Ä—ã',
    health: '–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ç–∏'
  }
}

// –ü–µ—Ä–µ–≤–æ–¥—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫
const enTranslations = {
  common: {
    loading: 'Loading...',
    error: 'Error',
    success: 'Success',
    save: 'Save',
    cancel: 'Cancel',
    delete: 'Delete',
    edit: 'Edit',
    search: 'Search',
    filter: 'Filter',
    clear: 'Clear',
    back: 'Back',
    next: 'Next',
    publish: 'Publish',
    draft: 'Draft'
  },
  app: {
    title: 'Fractal Ads',
    subtitle: 'Decentralized Ads Platform',
    welcome: 'Welcome!',
    getStarted: 'Get Started'
  },
  auth: {
    createAccount: 'Create Account',
    accountName: 'Account Name',
    selectEmoji: 'Select Emoji',
    accounts: 'Accounts',
    switchAccount: 'Switch Account',
    deleteAccount: 'Delete Account'
  },
  ads: {
    title: 'Ads',
    myAds: 'My Ads',
    createAd: 'Create Ad',
    adTitle: 'Title',
    description: 'Description',
    price: 'Price',
    category: 'Category',
    location: 'Location',
    tags: 'Tags',
    noAds: 'No ads',
    views: 'Views',
    published: 'Published'
  },
  categories: {
    electronics: 'Electronics',
    vehicles: 'Vehicles',
    property: 'Property',
    jobs: 'Jobs',
    services: 'Services',
    fashion: 'Fashion',
    home: 'Home & Garden',
    sports: 'Sports',
    books: 'Books',
    other: 'Other'
  },
  network: {
    title: 'Network',
    status: 'Network Status',
    nodes: 'Nodes',
    online: 'Online',
    offline: 'Offline',
    connecting: 'Connecting...',
    connected: 'Connected',
    peers: 'Peers',
    health: 'Network Health'
  }
}

i18n
  .use(initReactI18next)
  .init({
    resources: {
      ru: { translation: ruTranslations },
      en: { translation: enTranslations }
    },
    lng: 'ru',
    fallbackLng: 'en',
    interpolation: {
      escapeValue: false
    }
  })

export default i18n

src/stores/authStore.ts
import { create } from 'zustand'
import { persist } from 'zustand/middleware'
import { immer } from 'zustand/middleware/immer'
import { generatePrivateKey, getPublicKey } from '@noble/ed25519'
import { v4 as uuidv4 } from 'uuid'
import type { User } from '../types'

interface AuthState {
  users: User[]
  currentUser: User | null
  isAuthenticated: boolean
  
  // –î–µ–π—Å—Ç–≤–∏—è
  createUser: (name: string, emoji: string) => Promise<User>
  switchUser: (userId: string) => void
  deleteUser: (userId: string) => void
  logout: () => void
  updateUser: (userId: string, updates: Partial<User>) => void
}

// –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç–º–æ–¥–∑–∏ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–æ–≤
export const AVAILABLE_EMOJIS = [
  'üòÄ', 'üòé', 'ü§ñ', 'üëæ', 'ü¶Ñ', 'üöÄ', '‚≠ê', 'üåü',
  'üî•', 'üíé', 'üé®', 'üé≠', 'üé™', 'üéØ', 'üé≤', 'üéÆ',
  'üåà', 'üå∏', 'üå∫', 'üçÄ', 'üåô', '‚òÄÔ∏è', '‚ö°', 'üîÆ',
  'üé∏', 'üéπ', 'üé§', 'üéß', 'üì∏', 'üé¨', 'üìö', '‚ú®'
]

export const useAuthStore = create<AuthState>()(
  persist(
    immer((set, get) => ({
      users: [],
      currentUser: null,
      isAuthenticated: false,

      createUser: async (name: string, emoji: string) => {
        const privateKey = generatePrivateKey()
        const publicKey = await getPublicKey(privateKey)
        
        const newUser: User = {
          id: uuidv4(),
          name: name.trim(),
          emoji,
          publicKey: Buffer.from(publicKey).toString('hex'),
          privateKey: Buffer.from(privateKey).toString('hex'),
          createdAt: new Date(),
          reputation: 0,
          adsCount: 0
        }

        set(state => {
          state.users.push(newUser)
          state.currentUser = newUser
          state.isAuthenticated = true
        })

        return newUser
      },

      switchUser: (userId: string) => {
        const user = get().users.find(u => u.id === userId)
        if (user) {
          set(state => {
            state.currentUser = user
            state.isAuthenticated = true
          })
        }
      },

      deleteUser: (userId: string) => {
        set(state => {
          state.users = state.users.filter(u => u.id !== userId)
          if (state.currentUser?.id === userId) {
            state.currentUser = state.users[0] || null
            state.isAuthenticated = state.users.length > 0
          }
        })
      },

      logout: () => {
        set(state => {
          state.currentUser = null
          state.isAuthenticated = false
        })
      },

      updateUser: (userId: string, updates: Partial<User>) => {
        set(state => {
          const userIndex = state.users.findIndex(u => u.id === userId)
          if (userIndex >= 0) {
            state.users[userIndex] = { ...state.users[userIndex], ...updates }
            if (state.currentUser?.id === userId) {
              state.currentUser = state.users[userIndex]
            }
          }
        })
      }
    })),
    {
      name: 'fractal-auth-storage',
      version: 1
    }
  )
)

src/stores/adsStore.ts
import { create } from 'zustand'
import { persist } from 'zustand/middleware'
import { immer } from 'zustand/middleware/immer'
import { v4 as uuidv4 } from 'uuid'
import type { Ad, AdFilter, Category, Currency } from '../types'

interface AdsState {
  ads: Ad[]
  myAds: Ad[]
  filter: AdFilter
  isLoading: boolean
  
  // –î–µ–π—Å—Ç–≤–∏—è —Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏
  createAd: (adData: Omit<Ad, 'id' | 'createdAt' | 'updatedAt' | 'views' | 'favorites'>) => Ad
  updateAd: (id: string, updates: Partial<Ad>) => void
  deleteAd: (id: string) => void
  toggleFavorite: (id: string) => void
  incrementViews: (id: string) => void
  
  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ –ø–æ–∏—Å–∫
  setFilter: (filter: Partial<AdFilter>) => void
  clearFilter: () => void
  getFilteredAds: () => Ad[]
  
  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Å–µ—Ç—å—é
  addNetworkAd: (ad: Ad) => void
  syncAds: (ads: Ad[]) => void
}

const defaultFilter: AdFilter = {
  sortBy: 'date',
  sortOrder: 'desc'
}

export const useAdsStore = create<AdsState>()(
  persist(
    immer((set, get) => ({
      ads: [],
      myAds: [],
      filter: defaultFilter,
      isLoading: false,

      createAd: (adData) => {
        const newAd: Ad = {
          ...adData,
          id: uuidv4(),
          createdAt: new Date(),
          updatedAt: new Date(),
          views: 0,
          favorites: 0,
          status: 'active'
        }

        set(state => {
          state.myAds.push(newAd)
          state.ads.push(newAd)
        })

        return newAd
      },

      updateAd: (id: string, updates: Partial<Ad>) => {
        set(state => {
          const updateInArray = (arr: Ad[]) => {
            const index = arr.findIndex(ad => ad.id === id)
            if (index >= 0) {
              arr[index] = {
                ...arr[index],
                ...updates,
                updatedAt: new Date()
              }
            }
          }
          
          updateInArray(state.ads)
          updateInArray(state.myAds)
        })
      },

      deleteAd: (id: string) => {
        set(state => {
          state.ads = state.ads.filter(ad => ad.id !== id)
          state.myAds = state.myAds.filter(ad => ad.id !== id)
        })
      },

      toggleFavorite: (id: string) => {
        set(state => {
          const ad = state.ads.find(ad => ad.id === id)
          if (ad) {
            ad.favorites += 1 // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞
          }
        })
      },

      incrementViews: (id: string) => {
        set(state => {
          const ad = state.ads.find(ad => ad.id === id)
          if (ad) {
            ad.views += 1
          }
        })
      },

      setFilter: (newFilter: Partial<AdFilter>) => {
        set(state => {
          state.filter = { ...state.filter, ...newFilter }
        })
      },

      clearFilter: () => {
        set(state => {
          state.filter = defaultFilter
        })
      },

      getFilteredAds: () => {
        const { ads, filter } = get()
        let filtered = [...ads]

        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if (filter.category) {
          filtered = filtered.filter(ad => ad.category === filter.category)
        }

        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é  
        if (filter.location) {
          filtered = filtered.filter(ad => 
            ad.location.toLowerCase().includes(filter.location!.toLowerCase())
          )
        }

        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ü–µ–Ω–µ
        if (filter.priceMin !== undefined) {
          filtered = filtered.filter(ad => ad.price && ad.price >= filter.priceMin!)
        }
        
        if (filter.priceMax !== undefined) {
          filtered = filtered.filter(ad => ad.price && ad.price <= filter.priceMax!)
        }

        // –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É
        if (filter.searchQuery) {
          const query = filter.searchQuery.toLowerCase()
          filtered = filtered.filter(ad =>
            ad.title.toLowerCase().includes(query) ||
            ad.description.toLowerCase().includes(query) ||
            ad.tags.some(tag => tag.toLowerCase().includes(query))
          )
        }

        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–µ–≥–∞–º
        if (filter.tags && filter.tags.length > 0) {
          filtered = filtered.filter(ad =>
            filter.tags!.some(tag => ad.tags.includes(tag))
          )
        }

        // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        filtered.sort((a, b) => {
          let comparison = 0
          
          switch (filter.sortBy) {
            case 'date':
              comparison = new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()
              break
            case 'price':
              comparison = (a.price || 0) - (b.price || 0)
              break
            case 'views':
              comparison = b.views - a.views
              break
            case 'relevance':
              // –ü—Ä–æ—Å—Ç–∞—è —Ñ–æ—Ä–º—É–ª–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
              const scoreA = a.views * 0.3 + a.favorites * 0.7
              const scoreB = b.views * 0.3 + b.favorites * 0.7
              comparison = scoreB - scoreA
              break
          }
          
          return filter.sortOrder === 'desc' ? comparison : -comparison
        })

        return filtered
      },

      addNetworkAd: (ad: Ad) => {
        set(state => {
          const exists = state.ads.some(existing => existing.id === ad.id)
          if (!exists) {
            state.ads.push(ad)
          }
        })
      },

      syncAds: (networkAds: Ad[]) => {
        set(state => {
          // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏, –∏–∑–±–µ–≥–∞—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
          const existingIds = new Set(state.ads.map(ad => ad.id))
          const newAds = networkAds.filter(ad => !existingIds.has(ad.id))
          state.ads.push(...newAds)
        })
      }
    })),
    {
      name: 'fractal-ads-storage',
      version: 1
    }
  )
)

src/App.tsx
import React, { useState } from 'react'
import { useTranslation } from 'react-i18next'
import { useAuthStore } from './stores/authStore'
import AuthPanel from './components/AuthPanel'
import AdsList from './components/AdsList'
import CreateAdForm from './components/CreateAdForm'
import NetworkStatus from './components/NetworkStatus'
import { 
  Users, 
  Plus, 
  Search, 
  Network, 
  Globe, 
  Zap,
  Menu,
  X
} from 'lucide-react'

type ActiveTab = 'ads' | 'create' | 'network' | 'profile'

function App() {
  const { t } = useTranslation()
  const { isAuthenticated, currentUser } = useAuthStore()
  const [activeTab, setActiveTab] = useState<ActiveTab>('ads')
  const [sidebarOpen, setSidebarOpen] = useState(false)

  if (!isAuthenticated) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-primary-50 to-primary-100">
        <div className="container mx-auto px-4 py-8">
          <div className="text-center mb-8">
            <div className="inline-flex items-center justify-center w-16 h-16 bg-primary-500 rounded-full mb-4">
              <Zap className="w-8 h-8 text-white" />
            </div>
            <h1 className="text-4xl font-bold text-gray-900 mb-2">
              {t('app.title')}
            </h1>
            <p className="text-xl text-gray-600">
              {t('app.subtitle')}
            </p>
          </div>
          <AuthPanel />
        </div>
      </div>
    )
  }

  const tabs = [
    { id: 'ads', label: t('ads.title'), icon: Search },
    { id: 'create', label: t('ads.createAd'), icon: Plus },
    { id: 'network', label: t('network.title'), icon: Network },
    { id: 'profile', label: t('auth.accounts'), icon: Users }
  ] as const

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white shadow-sm border-b border-gray-200">
        <div className="container mx-auto px-4">
          <div className="flex items-center justify-between h-16">
            <div className="flex items-center space-x-4">
              <button
                onClick={() => setSidebarOpen(!sidebarOpen)}
                className="lg:hidden p-2 rounded-lg hover:bg-gray-100"
              >
                {sidebarOpen ? <X size={20} /> : <Menu size={20} />}
              </button>
              
              <div className="flex items-center space-x-2">
                <div className="w-8 h-8 bg-gradient-to-br from-primary-400 to-primary-600 rounded-lg flex items-center justify-center">
                  <Zap className="w-5 h-5 text-white" />
                </div>
                <h1 className="text-xl font-bold text-gray-900">
                  {t('app.title')}
                </h1>
              </div>
            </div>

            <div className="flex items-center space-x-4">
              <NetworkStatus />
              <div className="flex items-center space-x-2">
                <span className="text-2xl">{currentUser?.emoji}</span>
                <span className="hidden sm:block text-sm font-medium text-gray-700">
                  {currentUser?.name}
                </span>
              </div>
            </div>
          </div>
        </div>
      </header>

      <div className="flex">
        {/* Sidebar */}
        <aside className={`
          ${sidebarOpen ? 'translate-x-0' : '-translate-x-full'}
          lg:translate-x-0 fixed lg:static inset-y-0 left-0 z-50
          w-64 bg-white shadow-lg border-r border-gray-200
          transition-transform duration-300 ease-in-out
        `}>
          <nav className="p-4 mt-16 lg:mt-0">
            <div className="space-y-2">
              {tabs.map(tab => (
                <button
                  key={tab.id}
                  onClick={() => {
                    setActiveTab(tab.id as ActiveTab)
                    setSidebarOpen(false)
                  }}
                  className={`
                    flex items-center space-x-3 w-full p-3 rounded-lg text-left
                    transition-colors duration-200
                    ${activeTab === tab.id
                      ? 'bg-primary-50 text-primary-700 border border-primary-200'
                      : 'text-gray-600 hover:bg-gray-50 hover:text-gray-900'
                    }
                  `}
                >
                  <tab.icon size={20} />
                  <span className="font-medium">{tab.label}</span>
                </button>
              ))}
            </div>
          </nav>
        </aside>

        {/* Overlay –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ */}
        {sidebarOpen && (
          <div 
            className="lg:hidden fixed inset-0 bg-black bg-opacity-50 z-40"
            onClick={() => setSidebarOpen(false)}
          />
        )}

        {/* Main Content */}
        <main className="flex-1 p-6">
          <div className="max-w-6xl mx-auto">
            {activeTab === 'ads' && <AdsList />}
            {activeTab === 'create' && <CreateAdForm />}
            {activeTab === 'network' && (
              <div className="bg-white rounded-xl shadow-sm p-6">
                <h2 className="text-2xl font-bold text-gray-900 mb-6">
                  {t('network.title')}
                </h2>
                <NetworkStatus detailed />
                
                <div className="mt-8 grid grid-cols-1 md:grid-cols-3 gap-6">
                  <div className="bg-gradient-to-br from-blue-50 to-blue-100 p-6 rounded-lg">
                    <Globe className="w-8 h-8 text-blue-600 mb-3" />
                    <h3 className="font-semibold text-gray-900 mb-2">
                      –î–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–µ—Ç—å
                    </h3>
                    <p className="text-sm text-gray-600">
                      –ù–µ—Ç —Å–µ—Ä–≤–µ—Ä–æ–≤, —Ç–æ–ª—å–∫–æ P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
                    </p>
                  </div>
                  
                  <div className="bg-gradient-to-br from-green-50 to-green-100 p-6 rounded-lg">
                    <Zap className="w-8 h-8 text-green-600 mb-3" />
                    <h3 className="font-semibold text-gray-900 mb-2">
                      –ë—ã—Å—Ç—Ä–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
                    </h3>
                    <p className="text-sm text-gray-600">
                      –û–±—ä—è–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è—é—Ç—Å—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –ø–æ –≤—Å–µ–π —Å–µ—Ç–∏
                    </p>
